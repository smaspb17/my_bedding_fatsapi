import logging
import re
from typing import Annotated

from fastapi import Depends
from sqlmodel import SQLModel
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker

from app.core.config import settings


# class SQLQueryFormatter(logging.Formatter):
#     def __init__(self):
#         super().__init__()
#
#     def format(self, record):
#         message = record.getMessage()
#
#         # –£–±–∏—Ä–∞–µ–º –Ω–µ–Ω—É–∂–Ω—ã–µ —Ñ–ª–∞–≥–∏ –∫—ç—à–∞ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
#         if "cached" in message or message in ["BEGIN", "COMMIT", "ROLLBACK"]:
#             return f"{message}\n"  # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ BEGIN, COMMIT, ROLLBACK –∏ –∫—ç—à–∞
#
#         # –ï—Å–ª–∏ —ç—Ç–æ SQL-–∑–∞–ø—Ä–æ—Å, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞
#         if re.search(r"\b(SELECT|INSERT|UPDATE|DELETE|CREATE|DROP|ALTER)\b", message, re.IGNORECASE):
#             message = re.sub(r"\[cached since .*? ago\] ", "", message)  # –£–±–∏—Ä–∞–µ–º –∫—ç—à
#             return f"{message}\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
#
#         # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, (1,), (5, 0))
#         if re.match(r"^\(\d+(,\s*\d+)*\)$", message):
#             return f"{message}\n"  # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ —Å–∫–æ–±–∫–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ
#
#         # –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, INFO —Å–æ–æ–±—â–µ–Ω–∏—è)
#         return f"{message}\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
#
# # üîπ –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ SQLAlchemy
# sqlalchemy_logger = logging.getLogger("sqlalchemy.engine.Engine")
# sqlalchemy_logger.setLevel(logging.INFO)  # –õ–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ SQL
#
# # üîπ –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≥–æ–≤
# handler = logging.StreamHandler()
# handler.setFormatter(SQLQueryFormatter())
#
# # üîπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π
# sqlalchemy_logger.handlers.clear()
# sqlalchemy_logger.addHandler(handler)




DATABASE_URL = settings.DATABASE_URL

# –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫
engine = create_async_engine(DATABASE_URL, echo=True)

# –°–æ–∑–¥–∞—ë–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π. –û—Ç–º–µ–Ω–µ–Ω–∞ –ø—Ä–æ—Å—Ä–æ—á–∫–∞ –æ–±—ä–µ–∫—Ç–æ–≤!!!
async_session_maker = sessionmaker(
    engine, class_=AsyncSession, expire_on_commit=False
)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ç–∞–±–ª–∏—Ü
async def create_db_and_tables():
    async with engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)


# –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–µ—Å—Å–∏–π –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π FastAPI
async def get_session() -> AsyncSession:
    async with async_session_maker() as session:
        print(f'–°–æ–∑–¥–∞–Ω–∞ —Å–µ—Å—Å–∏—è {session}')
        yield session


AsyncSessionDep = Annotated[AsyncSession, Depends(get_session)]
